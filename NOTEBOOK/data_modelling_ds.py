# -*- coding: utf-8 -*-
"""DATA_MODELLING_DS (3).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_3Me15wgAm6kW_ouJ8LIFX_MPfXObp5N

### **LOAD DATA**
"""

!pip install pmdarima

from google.colab import files
data_to_load = files.upload()

import pandas as pd
from matplotlib import pyplot as plt
from statsmodels.graphics.tsaplots import plot_acf

# data setup
import io
df = pd.read_csv(io.BytesIO(data_to_load['gdpgr_transform.csv']),parse_dates=["DATE"])
df.head()

import numpy as np
import pandas as pd
import statsmodels.api as sm
from statsmodels.tsa.api import VAR
from statsmodels.tsa.base import  datetools

df = pd.read_csv("gdpgr_transform.csv", index_col=0, parse_dates=[0])
df.head()

"""### **SETTING FINAL GDPGR FORECAST**"""

df2 = pd.read_csv(io.BytesIO(data_to_load['gdpgr_transform.csv']),parse_dates=["DATE"])
df2.head()

#convert columns to datetime and then to month period
df2['DATE'] = pd.to_datetime(df2['DATE']).dt.to_period('M')
df_series = df2.set_index('DATE').asfreq('M')
df_series

# Final Target Variable Dataset
df_series = df2.set_index('DATE').asfreq('M')
series = pd.DataFrame(df_series['GDPGR'], index= df_series.index)
target_final = series.iloc[:,]
target_final.tail(5)

# Holt Winterâ€™s Exponential Smoothing or Triple Smoothing
# fit model
from statsmodels.tsa.holtwinters import ExponentialSmoothing

model = ExponentialSmoothing(series, trend = 'add',  seasonal_periods=None)
model_fit = model.fit()
# make prediction
GDPGR_Forecast = pd.DataFrame(model_fit.forecast(steps=10))
GDPGR_Forecast.columns = ['Holts-Winter Forecast']
GDPGR_Forecast

"""### **SET UP TRAIN-TEST**"""

from sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error

# making new data frame with dropped NA values 
df =df.dropna(axis = 0, how ='any')

X_train = df[:180].drop("GDPGR", axis=1) #Period: 2005-02 to 2020-01 ~ Before Covid-19
X_train1 = df[:192].drop("GDPGR", axis=1) #Period:: 2005-2 to 2021-01 ~ Before Covid-19 and Vaccine
X_test_all = df[180:].drop("GDPGR", axis=1) #Period: 2020-02 to 2021-12 ~ After Covid-19
X_test_bvac = df[180:192].drop("GDPGR", axis=1) #Period: 2020-02 to 2021-01 ~ Before vaccination
X_test_avac = df[192:].drop("GDPGR", axis=1) # Period: 2021-02 to 2021-12 ~ After vaccination

y_train = df[:180]["GDPGR"]
y_train1 = df[:192]["GDPGR"]
y_test_all = df[180:]["GDPGR"]
y_test_bvac = df[180:192]["GDPGR"]
y_test_avac = df[192:]["GDPGR"]

"""### **SETTING FORECAST METRICS**

### **Auto Regressive (AR)**
"""

# Set one: Before and All Covid-19 
from statsmodels.tsa.ar_model import AutoReg

#Create training and test data
train_data1 = df[:180]["GDPGR"]
test_data1 = df[180:]["GDPGR"]

# Instantiate and fit the AR model with training data
ar_model1 = AutoReg(train_data1, lags=8).fit()

# Print Summary
print(ar_model1.summary())

# Make the predictions
pred_ar1 = ar_model1.predict(start=len(train_data1), end=(len(df)-1), dynamic=False)

# Plot the prediction vs test data
from matplotlib import pyplot
pyplot.plot(pred_ar1)
pyplot.plot(test_data1, color='red')

# Performance metrics
rmse = np.sqrt(mean_squared_error(test_data1, pred_ar1))
print(f"RMSE Score = {rmse}")

mae = mean_absolute_error(test_data1, pred_ar1)
print(f"MAE Score = {mae}")

# Predicted value
ar1 = pd.DataFrame({'AR Model Predicted': pred_ar1[:]})
ar1.index = test_data1.index
ar1.head()

# Set Two: Before Covid and Vaccination 
from statsmodels.tsa.ar_model import AutoReg

#Create training and test data
train_data2 = df[:180]["GDPGR"]
test_data2 = df[180:192]["GDPGR"]

# Instantiate and fit the AR model with training data
ar_model2 = AutoReg(train_data2, lags=4).fit()

# Print Summary
print(ar_model2.summary())

# Make the predictions
pred_ar2 = ar_model2.predict(start=len(train_data2), end=len(df)-12, dynamic=False)

# Plot the prediction vs test data

from matplotlib import pyplot
pyplot.plot(pred_ar2)
pyplot.plot(test_data2, color='red')

# Performance metrics
rmse = np.sqrt(mean_squared_error(test_data2, pred_ar2))
print(f"RMSE Score = {rmse}")

mae = mean_absolute_error(test_data2, pred_ar2)
print(f"MAE Score = {mae}")

# Predicted value
ar2 = pd.DataFrame({'AR Model Predicted': pred_ar2[:]})
ar2.index = test_data2.index
ar2.head()

# Set Three: Before Covid and After Vaccination 
from statsmodels.tsa.ar_model import AutoReg

#Create training and test data
train_data3 = df[:192]["GDPGR"]
test_data3 = df[192:]["GDPGR"]

# Instantiate and fit the AR model with training data
ar_model3 = AutoReg(train_data3, lags=4).fit()

# Print Summary
print(ar_model3.summary())

# Make the predictions
pred_ar3 = ar_model3.predict(start=len(train_data3), end=len(df)-1, dynamic=False)

# Plot the prediction vs test data
from matplotlib import pyplot
pyplot.plot(pred_ar3)
pyplot.plot(test_data3, color='red')

# Performance metrics
rmse = np.sqrt(mean_squared_error(test_data3, pred_ar3))
print(f"RMSE Score = {rmse}")

mae = mean_absolute_error(test_data3, pred_ar3)
print(f"MAE Score = {mae}")

# Predicted value
ar3 = pd.DataFrame({'AR Model Predicted': pred_ar3[:]})
ar3.index = test_data3.index
ar3.head()

#Forecast value
forecast_ar = ar_model1.predict(start=len(test_data3), end=(len(df)-1), dynamic=False)

ar1a = pd.DataFrame({'AR Model Forecasted': pred_ar1[:10]})
ar1a.index = GDPGR_Forecast.index
ar1a.head()

# Plot
# ==============================================================================
fig, ax = plt.subplots(figsize=(9, 4))
y_train.plot(ax=ax, label='train')
y_test_all.plot(ax=ax, label='test')
ar1.plot(ax=ax, label='predictions')
ar1a.plot(ax=ax, label ='forecast')

ax.legend();

"""# **Without Rolling**

### **LIGHTGBM**
"""

import lightgbm
from sklearn.metrics import mean_absolute_error

#Set 1:All Covid-19
model_lgbm1 = lightgbm.LGBMRegressor()
model_lgbm1.fit(X_train, y_train)

preds_lgbm_s1 = model_lgbm1.predict(X_test_all)

# Performance metrics
rmse = np.sqrt(mean_squared_error(y_test_all, preds_lgbm_s1))
print(f"RMSE Score = {rmse}")

mae = mean_absolute_error(y_test_all, preds_lgbm_s1)
print(f"MAE Score = {mae}")

#Predicted value
lgbm_s1 = pd.DataFrame({'Light GBM Predicted': preds_lgbm_s1[:]})
lgbm_s1.index = y_test_all.index
lgbm_s1.head()

#Set 2: Before vaccination
model_lgbm2 = lightgbm.LGBMRegressor()
model_lgbm2.fit(X_train, y_train)

preds_lgbm_s2 = model_lgbm2.predict(X_test_bvac)

# Performance metrics
rmse = np.sqrt(mean_squared_error(y_test_bvac, preds_lgbm_s2))
print(f"RMSE Score = {rmse}")

mae = mean_absolute_error(y_test_bvac, preds_lgbm_s2)
print(f"MAE Score = {mae}")

#Forecast value
lgbm_s2 = pd.DataFrame({'Light GBM Predicted': preds_lgbm_s2[:]})
lgbm_s2.index = y_test_bvac.index
lgbm_s2.head(5)

#Set 3: After vaccination
model_lgbm3 = lightgbm.LGBMRegressor()
model_lgbm3.fit(X_train1, y_train1)

preds_lgbm_s3 = model_lgbm3.predict(X_test_avac)

# Performance metrics
rmse = np.sqrt(mean_squared_error(y_test_avac, preds_lgbm_s3))
print(f"RMSE Score = {rmse}")

mae = mae = mean_absolute_error(y_test_avac, preds_lgbm_s3)
print(f"MAE Score = {mae}")

#Forecast value
lgbm_s3 = pd.DataFrame({'Light GBM Predicted': preds_lgbm_s3[:]})
lgbm_s3.index = y_test_avac.index
lgbm_s3.head(5)

#Forecast value
forecast_lgbm_s1 = model_lgbm1.predict(X_test_avac)

lgbm_s1a = pd.DataFrame({'Light GBM Forecast': forecast_lgbm_s1[:10]})
lgbm_s1a.index = GDPGR_Forecast.index
lgbm_s1a.head()

# Plot
# ==============================================================================
fig, ax = plt.subplots(figsize=(9, 4))
y_train.plot(ax=ax, label='train')
y_test_all.plot(ax=ax, label='test')
lgbm_s1.plot(ax=ax, label='predictions')
lgbm_s1a.plot(ax=ax, label ='forecast')

ax.legend();

"""### **LASSO REGRESSION**"""

from sklearn.linear_model import Lasso

model_las1 = Lasso()
model_las1.fit(X_train, y_train)

#Set 1: All Covid-19
preds_las_s1 = model_las1.predict(X_test_all)

# Performance metrics
rmse = np.sqrt(mean_squared_error(y_test_all, preds_las_s1))
print(f"RMSE Score = {rmse}")

mae = mean_absolute_error(y_test_all, preds_las_s1)
print(f"MAE Score = {mae}")

#Forecast value
las_s1 = pd.DataFrame({'Lasso Predicted': preds_las_s1[:]})
las_s1.index = y_test_all.index
las_s1.head(5)

#Set 2: Before vaccination
model_las2 = Lasso()
model_las2.fit(X_train, y_train)

preds_las_s2 = model_las2.predict(X_test_bvac)

# Performance metrics
rmse = np.sqrt(mean_squared_error(y_test_bvac, preds_las_s2))
print(f"RMSE Score = {rmse}")

mae = mean_absolute_error(y_test_bvac, preds_las_s2)
print(f"MAE Score = {mae}")

#Forecast value
las_s2 = pd.DataFrame({'Lasso Predicted': preds_las_s2[:]})
las_s2.index = y_test_bvac.index
las_s2.head(5)

#Set 3: After vaccination
model_las3 = Lasso()
model_las3.fit(X_train1, y_train1)

preds_las_s3 = model_las3.predict(X_test_avac)

# Performance metrics
rmse = np.sqrt(mean_squared_error(y_test_avac, preds_las_s3))
print(f"RMSE Score = {rmse}")

mae =mean_absolute_error(y_test_avac, preds_las_s3)
print(f"MAE Score = {mae}")

#Forecast value
las_s3 = pd.DataFrame({'Lasso Predicted': preds_las_s3[:]})
las_s3.index = y_test_avac.index
las_s3.head(5)

#Forecast value
forecast_las_s1 = model_las1.predict(X_test_avac)

las_s1a = pd.DataFrame({'Lasso Forecast': forecast_las_s1[:10]})
las_s1a.index = GDPGR_Forecast.index
las_s1a.head()

# Plot
# ==============================================================================
fig, ax = plt.subplots(figsize=(9, 4))
y_train.plot(ax=ax, label='train')
y_test_all.plot(ax=ax, label='test')
las_s1.plot(ax=ax, label='predictions')
las_s1a.plot(ax=ax, label ='forecast')

ax.legend();

"""### **RIDGE REGRESSION**"""

from sklearn.linear_model import Ridge

model_ri1 = Ridge()
model_ri1.fit(X_train, y_train)

#Set 1: All covid-19
preds_ri_s1 = model_ri1.predict(X_test_all)

# Performance metrics
rmse = np.sqrt(mean_squared_error(y_test_all, preds_ri_s1))
print(f"RMSE Score = {rmse}")

mae = mean_absolute_error(y_test_all, preds_ri_s1)
print(f"MAE Score = {mae}")

#Forecast value
ri_s1 = pd.DataFrame({'Ridge Predicted': preds_ri_s1[:]})
ri_s1.index = y_test_all.index
ri_s1.head(5)

#Set 2: Before vaccination
model_ri2 = Ridge()
model_ri2.fit(X_train, y_train)

preds_ri_s2 = model_ri2.predict(X_test_bvac)

# Performance metrics
rmse = np.sqrt(mean_squared_error(y_test_bvac, preds_ri_s2))
print(f"RMSE Score = {rmse}")

mae = mean_absolute_error(y_test_bvac, preds_ri_s2)
print(f"MAE Score = {mae}")

#Forecast value
ri_s2 = pd.DataFrame({'Ridge Predicted': preds_ri_s2[:]})
ri_s2.index = y_test_bvac.index
ri_s2.head(5)

#Set 3: After vaccination
model_ri3 = Ridge()
model_ri3.fit(X_train1, y_train1)

preds_ri_s3 = model_ri2.predict(X_test_avac)

# Performance metrics
rmse = np.sqrt(mean_squared_error(y_test_avac, preds_ri_s3))
print(f"RMSE Score = {rmse}")

mae = mean_absolute_error(y_test_avac, preds_ri_s3)
print(f"MAE Score = {mae}")

#Forecast value
ri_s3 = pd.DataFrame({'Ridge Predicted': preds_ri_s3[:]})
ri_s3.index = y_test_avac.index
ri_s3.head(5)

#Forecast value
forecast_ri_s1 = model_ri1.predict(X_test_avac)

ri_s1a = pd.DataFrame({'Ridge Forecast': forecast_ri_s1[:10]})
ri_s1a.index = GDPGR_Forecast.index
ri_s1a.head()

# Plot
# ==============================================================================
fig, ax = plt.subplots(figsize=(9, 4))
y_train.plot(ax=ax, label='train')
y_test_all.plot(ax=ax, label='test')
ri_s1.plot(ax=ax, label='predictions')
ri_s1a.plot(ax=ax, label ='forecast')

ax.legend();

"""### **KNN**"""

from sklearn.neighbors import KNeighborsRegressor

model_knn1 = KNeighborsRegressor()
model_knn1.fit(X_train, y_train)

#Set 1: All covid-19
preds_knn_s1 = model_knn1.predict(X_test_all)

# Performance metrics
rmse = np.sqrt(mean_squared_error(y_test_all, preds_knn_s1))
print(f"RMSE Score = {rmse}")

mae = mean_absolute_error(y_test_all, preds_knn_s1)
print(f"MAE Score = {mae}")

#Forecast value
knn_s1 = pd.DataFrame({'KNN Predicted': preds_knn_s1[:]})
knn_s1.index = y_test_all.index
knn_s1.head(5)

#Set 2: Before vaccination
model_knn2 = KNeighborsRegressor()
model_knn2.fit(X_train, y_train)

preds_knn_s2 = model_knn2.predict(X_test_bvac)

# Performance metrics
rmse = np.sqrt(mean_squared_error(y_test_bvac, preds_knn_s2))
print(f"RMSE Score = {rmse}")

mae = mean_absolute_error(y_test_bvac, preds_knn_s2)
print(f"MAE Score = {mae}")

#Forecast value
knn_s2 = pd.DataFrame({'KNN Predicted': preds_knn_s2[:]})
knn_s2.index = y_test_bvac.index
knn_s2.head(5)

#Set 3: After vaccination
model_knn3 = KNeighborsRegressor()
model_knn3.fit(X_train1, y_train1)

preds_knn_s3 = model_knn3.predict(X_test_avac)

# Performance metrics
rmse = np.sqrt(mean_squared_error(y_test_avac, preds_knn_s3))
print(f"RMSE Score = {rmse}")

mae = mean_absolute_error(y_test_avac, preds_knn_s3)
print(f"MAE Score = {mae}")

#Forecast value
knn_s3 = pd.DataFrame({'KNN Predicted': preds_knn_s3[:]})
knn_s3.index = y_test_avac.index
knn_s3.head(5)

#Forecast value
forecast_knn_s1 = model_knn1.predict(X_test_avac)

knn_s1a = pd.DataFrame({'KNN Forecast': forecast_knn_s1[:10]})
knn_s1a.index = GDPGR_Forecast.index
knn_s1a.head()

# Plot
# ==============================================================================
fig, ax = plt.subplots(figsize=(9, 4))
y_train.plot(ax=ax, label='train')
y_test_all.plot(ax=ax, label='test')
knn_s1.plot(ax=ax, label='predictions')
knn_s1a.plot(ax=ax, label ='forecast')

ax.legend();

"""### **PROPHET MULTIVARIATE**"""

from fbprophet import Prophet

X_train_prophet = X_train.copy()
X_train1_prophet = X_train1.copy()
X_test_all_prophet = X_test_all.copy()
X_test_bvac_prophet = X_test_bvac.copy()
X_test_avac_prophet = X_test_avac.copy()

y_train_prophet = y_train.copy()
y_train1_prophet = y_train1.copy()
y_test_all_prophet = y_test_all.copy()
y_test_bvac_prophet = y_test_bvac.copy()
y_test_avac_prophet = y_test_avac.copy()

X_train_prophet["ds"] = X_train_prophet.index
X_train_prophet["y"] = y_train_prophet.values

X_train1_prophet["ds"] = X_train1_prophet.index
X_train1_prophet["y"] = y_train1_prophet.values

X_test_all_prophet["ds"] = X_test_all_prophet.index
X_test_all_prophet["y"] = y_test_all_prophet.values

X_test_bvac_prophet["ds"] = X_test_bvac_prophet.index
X_test_bvac_prophet["y"] = y_test_bvac_prophet.values

X_test_avac_prophet["ds"] = X_test_avac_prophet.index
X_test_avac_prophet["y"] = y_test_avac_prophet.values

#Set 1: All Covid-19
prophet1 = Prophet()

for col in X_train_prophet.columns:
    if col not in ["ds", "y"]:
        prophet1.add_regressor(col)

prophet1.fit(X_train_prophet)

yhat = prophet1.predict(X_test_all_prophet)

# Performance metrics
rmse = np.sqrt(mean_squared_error(y_test_all, yhat.yhat))
print(f"RMSE Score = {rmse}")

mae = mean_absolute_error(y_test_all, yhat.yhat)
print(f"MAE Score = {mae}")

#Forecast value
prop_s1 = pd.DataFrame({'Prophet Predicted': yhat.yhat[:]})
prop_s1.index = y_test_all.index
prop_s1.head(5)

#Set 2: Before vaccination
prophet2 = Prophet()

for col in X_train_prophet.columns:
    if col not in ["ds", "y"]:
        prophet2.add_regressor(col)

prophet2.fit(X_train_prophet)

yhat = prophet2.predict(X_test_bvac_prophet)

# Performance metrics
rmse = np.sqrt(mean_squared_error(y_test_bvac, yhat.yhat))
print(f"RMSE Score = {rmse}")

mae = mean_absolute_error(y_test_bvac, yhat.yhat)
print(f"MAE Score = {mae}")

#Forecast value
prop_s2 = pd.DataFrame({'Prophet Predicted': yhat.yhat[:]})
prop_s2.index = y_test_bvac.index
prop_s2.head(5)

#Set 3: After vaccination
prophet3 = Prophet()

for col in X_train1_prophet.columns:
    if col not in ["ds", "y"]:
        prophet3.add_regressor(col)

prophet3.fit(X_train1_prophet)

yhat = prophet3.predict(X_test_avac_prophet)

# Performance metrics
rmse = np.sqrt(mean_squared_error(y_test_avac, yhat.yhat))
print(f"RMSE Score = {rmse}")

mae = mean_absolute_error(y_test_avac, yhat.yhat)
print(f"MAE Score = {mae}")

#Forecast value
prop_s3 = pd.DataFrame({'Prophet Predicted': yhat.yhat[:]})
prop_s3.index = y_test_avac.index
prop_s3.head(5)

#Forecast value
yhat = prophet1.predict(X_test_avac_prophet)

prop_s1a = pd.DataFrame({'Prophet Forecast': yhat.yhat[:10]})
prop_s1a.index = GDPGR_Forecast.index
prop_s1a.head()

# Plot
# ==============================================================================
fig, ax = plt.subplots(figsize=(9, 4))
y_train.plot(ax=ax, label='train')
y_test_all.plot(ax=ax, label='test')
prop_s1.plot(ax=ax, label='predictions')
prop_s1a.plot(ax=ax, label ='forecast')

ax.legend();

"""### **ELASTIC NET REGRESSION**"""

from sklearn.linear_model import ElasticNet

#Set 1:All Covid-19
model_en1 = ElasticNet()
model_en1.fit(X_train, y_train)

preds_en_s1 = model_en1.predict(X_test_all)

# Performance metrics
rmse = np.sqrt(mean_squared_error(y_test_all, preds_en_s1 ))
print(f"RMSE Score = {rmse}")

mae = mean_absolute_error(y_test_all, preds_en_s1 )
print(f"MAE Score = {mae}")

#Forecast value
en_s1 = pd.DataFrame({'Elastic Net Predicted': preds_en_s1[:]})
en_s1.index = y_test_all.index
en_s1.head(5)

#Set 2: Before vaccination
model_en2 = ElasticNet()
model_en2.fit(X_train, y_train)

preds_en_s2 = model_en2.predict(X_test_bvac)

# Performance metrics
rmse = np.sqrt(mean_squared_error(y_test_bvac, preds_en_s2 ))
print(f"RMSE Score = {rmse}")

mae = mean_absolute_error(y_test_bvac, preds_en_s2 )
print(f"MAE Score = {mae}")

#Forecast value
en_s2 = pd.DataFrame({'Elastic Net Predicted': preds_en_s2[:]})
en_s2.index = y_test_bvac.index
en_s2.head(5)

#Set 3: After vaccination
model_en3 = ElasticNet()
model_en3.fit(X_train1, y_train1)

preds_en_s3 = model_en3.predict(X_test_avac)

# Performance metrics
rmse = np.sqrt(mean_squared_error(y_test_avac, preds_en_s3 ))
print(f"RMSE Score = {rmse}")

mae = mean_absolute_error(y_test_avac, preds_en_s3 )
print(f"MAE Score = {mae}")

#Forecast value
en_s3 = pd.DataFrame({'Elastic Net Predicted': preds_en_s3[:]})
en_s3.index = y_test_avac.index
en_s3.head(5)

#Forecast value
forecast_en_s1 = model_en1.predict(X_test_avac)

en_s1a = pd.DataFrame({'Elastic Net Forecast': forecast_en_s1[:10]})
en_s1a.index = GDPGR_Forecast.index
en_s1a.head()

# Plot
# ==============================================================================
fig, ax = plt.subplots(figsize=(9, 4))
y_train.plot(ax=ax, label='train')
y_test_all.plot(ax=ax, label='test')
en_s1.plot(ax=ax, label='predictions')
en_s1a.plot(ax=ax, label ='forecast')

ax.legend();

"""### **RANDOM FOREST**"""

from sklearn.ensemble import RandomForestRegressor

#Set 1: All Covid-19
model_rf1 = RandomForestRegressor(n_estimators=5000, oob_score=True, random_state=100)
model_rf1.fit(X_train, y_train)

preds_rf1 = model_rf1.predict(X_test_all)

# Performance metrics
rmse = np.sqrt(mean_squared_error(y_test_all, preds_rf1 ))
print(f"RMSE Score = {rmse}")

mae = mean_absolute_error(y_test_all, preds_rf1 )
print(f"MAE Score = {mae}")

#Forecast value
rf1 = pd.DataFrame({'Random Forest Predicted': preds_rf1[:]})
rf1.index = y_test_all.index
rf1.head(5)

#Set 2: Before vaccination
model_rf2 = RandomForestRegressor(n_estimators=5000, oob_score=True, random_state=100)
model_rf2.fit(X_train, y_train)

preds_rf2 = model_rf2.predict(X_test_bvac)

# Performance metrics
rmse = np.sqrt(mean_squared_error(y_test_bvac, preds_rf2 ))
print(f"RMSE Score = {rmse}")

mae = mean_absolute_error(y_test_bvac, preds_rf2 )
print(f"MAE Score = {mae}")

#Forecast value
rf2 = pd.DataFrame({'Random Forest Predicted': preds_rf2[:]})
rf2.index = y_test_bvac.index
rf2.head(5)

#Set 3: After vaccination
model_rf3 = RandomForestRegressor(n_estimators=5000, oob_score=True, random_state=100)
model_rf3.fit(X_train1, y_train1)

preds_rf3 = model_rf3.predict(X_test_avac)

# Performance metrics
rmse = np.sqrt(mean_squared_error(y_test_avac, preds_rf3 ))
print(f"RMSE Score = {rmse}")

mae = mean_absolute_error(y_test_avac, preds_rf3)
print(f"MAE Score = {mae}")

#Forecast value
rf3 = pd.DataFrame({'Random Forest Predicted': preds_rf3[:]})
rf3.index = y_test_avac.index
rf3.head(5)

#Forecast value
forecast_rf1 = model_rf1.predict(X_test_avac)

rf1a = pd.DataFrame({'Random Forest Forecast': forecast_rf1[:10]})
rf1a.index = GDPGR_Forecast.index
rf1a.head()

# Plot
# ==============================================================================
fig, ax = plt.subplots(figsize=(9, 4))
y_train.plot(ax=ax, label='train')
y_test_all.plot(ax=ax, label='test')
rf1.plot(ax=ax, label='predictions')
rf1a.plot(ax=ax, label ='forecast')

ax.legend();

"""### **DECISION TREE**"""

from sklearn.tree import DecisionTreeRegressor

#Set 1: During Covid-19
model_dt1 = DecisionTreeRegressor(max_depth=8, min_samples_leaf=0.13, random_state=3)
model_dt1.fit(X_train, y_train)

preds_dt1 = model_dt1.predict(X_test_all)

# Performance metrics
rmse = np.sqrt(mean_squared_error(y_test_all, preds_dt1 ))
print(f"RMSE Score = {rmse}")

mae = mean_absolute_error(y_test_all, preds_dt1)
print(f"MAE Score = {mae}")

#Forecast value
dt1 = pd.DataFrame({'Decision Tree Predicted': preds_dt1[:]})
dt1.index = y_test_all.index
dt1.head(5)

#Set 2: Before vaccination
model_dt2 = DecisionTreeRegressor(max_depth=8, min_samples_leaf=0.13, random_state=3)
model_dt2.fit(X_train, y_train)

preds_dt2 = model_dt2.predict(X_test_bvac)

# Performance metrics
rmse = np.sqrt(mean_squared_error(y_test_bvac, preds_dt2 ))
print(f"RMSE Score = {rmse}")

mae = mean_absolute_error(y_test_bvac, preds_dt2)
print(f"MAE Score = {mae}")

#Forecast value
dt2 = pd.DataFrame({'Decision Tree Predicted': preds_dt2[:]})
dt2.index = y_test_bvac.index
dt2.head(5)

#Set 3: After vaccination
model_dt3 = DecisionTreeRegressor(max_depth=8, min_samples_leaf=0.13, random_state=3)
model_dt3.fit(X_train1, y_train1)

preds_dt3 = model_dt3.predict(X_test_avac)

# Performance metrics
rmse = np.sqrt(mean_squared_error(y_test_avac, preds_dt3 ))
print(f"RMSE Score = {rmse}")

mae = mean_absolute_error(y_test_avac, preds_dt3)
print(f"MAE Score = {mae}")

#Forecast value
dt3 = pd.DataFrame({'Decision Tree Predicted': preds_dt3[:]})
dt3.index = y_test_avac.index
dt3.head(5)

#Forecast value
forecast_dt1 = model_dt1.predict(X_test_avac)

dt1a = pd.DataFrame({'Decision Tree Forecast': forecast_dt1[:10]})
dt1a.index = GDPGR_Forecast.index
dt1a.head()

# Plot
# ==============================================================================
fig, ax = plt.subplots(figsize=(9, 4))
y_train.plot(ax=ax, label='train')
y_test_all.plot(ax=ax, label='test')
dt1.plot(ax=ax, label='predictions')
dt1a.plot(ax=ax, label ='forecast')

ax.legend();

"""### **XG BOOST**"""

import xgboost as xgb

#Set 1: All Covid-19
model_xg1 = xgb.XGBRegressor(n_estimators=100,max_depth = 8, min_child_weight = 1,gamma = 1,learning_rate = 0.1) 
model_xg1.fit(X_train, y_train)

preds_xg1 = model_xg1.predict(X_test_all)

# Performance metrics
rmse = np.sqrt(mean_squared_error(y_test_all, preds_xg1))
print(f"RMSE Score = {rmse}")

mae = mean_absolute_error(y_test_all, preds_xg1)
print(f"MAE Score = {mae}")

#Forecast value
xg1 = pd.DataFrame({'XG Boost Predicted': preds_xg1[:]})
xg1.index = y_test_all.index
xg1.head(5)

#Set 2: Before vaccination
model_xg2 = xgb.XGBRegressor(n_estimators=100,max_depth = 8, min_child_weight = 1,gamma = 1,learning_rate = 0.1) 
model_xg2.fit(X_train, y_train)

preds_xg2 = model_xg2.predict(X_test_bvac)

# Performance metrics
rmse = np.sqrt(mean_squared_error(y_test_bvac, preds_xg2))
print(f"RMSE Score = {rmse}")

mae = mean_absolute_error(y_test_bvac, preds_xg2)
print(f"MAE Score = {mae}")

#Forecast value
xg2 = pd.DataFrame({'XG Boost Predicted': preds_xg2[:]})
xg2.index = y_test_bvac.index
xg2.head(5)

#Set 3: After vaccination
model_xg3 = xgb.XGBRegressor(n_estimators=100,max_depth = 8, min_child_weight = 1,gamma = 1,learning_rate = 0.1) 
model_xg3.fit(X_train1, y_train1)

preds_xg3 = model_xg3.predict(X_test_avac)

# Performance metrics
rmse = np.sqrt(mean_squared_error(y_test_avac, preds_xg3))
print(f"RMSE Score = {rmse}")

mae = mean_absolute_error(y_test_avac, preds_xg3)
print(f"MAE Score = {mae}")

#Forecast value
xg3 = pd.DataFrame({'XG Boost Predicted': preds_xg3[:]})
xg3.index = y_test_avac.index
xg3.head(5)

#Forecast value
forecast_xg1 = model_xg1.predict(X_test_avac)

xg1a = pd.DataFrame({'XG Boost Forecast': forecast_xg1[:10]})
xg1a.index = GDPGR_Forecast.index
xg1a.head()

# Plot
# ==============================================================================
fig, ax = plt.subplots(figsize=(9, 4))
y_train.plot(ax=ax, label='train')
y_test_all.plot(ax=ax, label='test')
xg1.plot(ax=ax, label='predictions')
xg1a.plot(ax=ax, label ='forecast')

ax.legend();

"""### **SUPPORT VECTOR MACHINE**"""

from sklearn.svm import SVR

#Set 1: All Covid-19
model_svr1 = SVR(kernel= 'rbf')
model_svr1.fit(X_train, y_train)

preds_svr1 = model_svr1.predict(X_test_all)

# Performance metrics
rmse = np.sqrt(mean_squared_error(y_test_all, preds_svr1 ))
print(f"RMSE Score = {rmse}")

mae = mean_absolute_error(y_test_all, preds_svr1 )
print(f"MAE Score = {mae}")

#Forecast value
svr1 = pd.DataFrame({'SVM Predicted': preds_svr1 [:]})
svr1.index = y_test_all.index
svr1.head(5)

#Set 2: Before Vaccination
model_svr2 = SVR(kernel= 'rbf')
model_svr2.fit(X_train, y_train)

preds_svr2 = model_svr2.predict(X_test_bvac)

# Performance metrics
rmse = np.sqrt(mean_squared_error(y_test_bvac, preds_svr2 ))
print(f"RMSE Score = {rmse}")

mae = mean_absolute_error(y_test_bvac, preds_svr2 )
print(f"MAE Score = {mae}")

#Forecast value
svr2 = pd.DataFrame({'SVM Predicted': preds_svr2 [:]})
svr2.index = y_test_bvac.index
svr2.head(5)

#Set 3: After Vaccination
model_svr3 = SVR(kernel= 'rbf')
model_svr3.fit(X_train1, y_train1)

preds_svr3 = model_svr3.predict(X_test_avac)

# Performance metrics
rmse = np.sqrt(mean_squared_error(y_test_avac, preds_svr3 ))
print(f"RMSE Score = {rmse}")

mae = mean_absolute_error(y_test_avac, preds_svr3 )
print(f"MAE Score = {mae}")

#Forecast value
svr3 = pd.DataFrame({'SVM Predicted': preds_svr3 [:]})
svr3.index = y_test_avac.index
svr3.head()

#Forecast value
forecast_svr1 = model_svr1.predict(X_test_avac)

svr1a = pd.DataFrame({'SVM Forecast': forecast_svr1[:10]})
svr1a.index = GDPGR_Forecast.index
svr1a.head()

# Plot
# ==============================================================================
fig, ax = plt.subplots(figsize=(9, 4))
y_train.plot(ax=ax, label='train')
y_test_all.plot(ax=ax, label='test')
svr1.plot(ax=ax, label='predictions')
svr1a.plot(ax=ax, label ='forecast')

ax.legend();

"""### **DEEP LEARNING -LSTM**"""

import tensorflow as tf

BATCH_SIZE = 64
BUFFER_SIZE = 100
WINDOW_LENGTH = 24

def window_data(X, Y, window=7):
    '''
    The dataset length will be reduced to guarante all samples have the window, 
    so new length will be len(dataset)-window
    '''
    x = []
    y = []
    for i in range(window-1, len(X)):
        x.append(X[i-window+1:i+1])
        y.append(Y[i])
    return np.array(x), np.array(y)

#Set 1: All Covid-19

#To join the datasets again of train and test
X_w = np.concatenate((X_train, X_test_all))
y_w = np.concatenate((y_train, y_test_all))

X_w, y_w = window_data(X_w, y_w, window=WINDOW_LENGTH)
X_train_w = X_w[:-len(X_test_all)]
y_train_w = y_w[:-len(X_test_all)]
X_test_w = X_w[-len(X_test_all):]
y_test_w = y_w[-len(X_test_all):]

# Check same test set as in the previous models to ensure didn't screw up on the windowing
print(f"Test set equal: {np.array_equal(y_test_w,y_test_all)}")

train_data = tf.data.Dataset.from_tensor_slices((X_train_w, y_train_w))
train_data = train_data.cache().shuffle(BUFFER_SIZE).batch(BATCH_SIZE).repeat()

val_data = tf.data.Dataset.from_tensor_slices((X_test_w, y_test_w))
val_data = val_data.batch(BATCH_SIZE).repeat()

dropout = 0.0
model = tf.keras.models.Sequential([
    tf.keras.layers.LSTM(
        128, input_shape=X_train_w.shape[-2:], dropout=dropout),
    tf.keras.layers.Dense(128),
    tf.keras.layers.Dense(128),
    tf.keras.layers.Dense(1)
])

model.compile(optimizer='rmsprop', loss='mae')

EVALUATION_INTERVAL = 200
EPOCHS = 15

model_history = model.fit(train_data, epochs=EPOCHS,
                                      steps_per_epoch=EVALUATION_INTERVAL,
                                      validation_data=val_data, validation_steps=50)  

preds_lstm_s1 = model.predict(X_test_w).reshape(1, -1)[0]

# Performance metrics
rmse = np.sqrt(mean_squared_error(y_test_all, preds_lstm_s1 ))
print(f"RMSE Score = {rmse}")

mae = mean_absolute_error(y_test_all, preds_lstm_s1 )
print(f"MAE Score = {mae}")

#Forecast value
lstm_s1 = pd.DataFrame({'LSTM Predicted': preds_lstm_s1[:]})
lstm_s1.index = y_test_all.index
lstm_s1.head(5)

#Set 2: Before vaccination

# To join the datasets again of train and test
X_w = np.concatenate((X_train, X_test_bvac))
y_w = np.concatenate((y_train, y_test_bvac))

X_w, y_w = window_data(X_w, y_w, window=WINDOW_LENGTH)
X_train_w = X_w[:-len(X_test_bvac)]
y_train_w = y_w[:-len(X_test_bvac)]
X_test_w = X_w[-len(X_test_bvac):]
y_test_w = y_w[-len(X_test_bvac):]

# Check same test set as in the previous models to ensure didn't screw up on the windowing
print(f"Test set equal: {np.array_equal(y_test_w,y_test_bvac)}")

train_data = tf.data.Dataset.from_tensor_slices((X_train_w, y_train_w))
train_data = train_data.cache().shuffle(BUFFER_SIZE).batch(BATCH_SIZE).repeat()

val_data = tf.data.Dataset.from_tensor_slices((X_test_w, y_test_w))
val_data = val_data.batch(BATCH_SIZE).repeat()

dropout = 0.0
model = tf.keras.models.Sequential([
    tf.keras.layers.LSTM(
        128, input_shape=X_train_w.shape[-2:], dropout=dropout),
    tf.keras.layers.Dense(128),
    tf.keras.layers.Dense(128),
    tf.keras.layers.Dense(1)
])

model.compile(optimizer='rmsprop', loss='mae')

EVALUATION_INTERVAL = 200
EPOCHS = 15

model_history = model.fit(train_data, epochs=EPOCHS,
                                      steps_per_epoch=EVALUATION_INTERVAL,
                                      validation_data=val_data, validation_steps=50)  

preds_lstm_s2 = model.predict(X_test_w).reshape(1, -1)[0]

# Performance metrics
rmse = np.sqrt(mean_squared_error(y_test_bvac, preds_lstm_s2 ))
print(f"RMSE Score = {rmse}")

mae = mean_absolute_error(y_test_bvac, preds_lstm_s2 )
print(f"MAE Score = {mae}")

#Forecast value
lstm_s2 = pd.DataFrame({'LSTM Forecast': preds_lstm_s2[:]})
lstm_s2.index = y_test_bvac.index
lstm_s2.head(5)

#Set 3: After vaccination

# To join the datasets again of train and test
X_w = np.concatenate((X_train1, X_test_avac))
y_w = np.concatenate((y_train1, y_test_avac))

X_w, y_w = window_data(X_w, y_w, window=WINDOW_LENGTH)
X_train_w = X_w[:-len(X_test_avac)]
y_train_w = y_w[:-len(X_test_avac)]
X_test_w = X_w[-len(X_test_avac):]
y_test_w = y_w[-len(X_test_avac):]

# Check same test set as in the previous models to ensure didn't screw up on the windowing
print(f"Test set equal: {np.array_equal(y_test_w,y_test_avac)}")

train_data = tf.data.Dataset.from_tensor_slices((X_train_w, y_train_w))
train_data = train_data.cache().shuffle(BUFFER_SIZE).batch(BATCH_SIZE).repeat()

val_data = tf.data.Dataset.from_tensor_slices((X_test_w, y_test_w))
val_data = val_data.batch(BATCH_SIZE).repeat()

dropout = 0.0
model = tf.keras.models.Sequential([
    tf.keras.layers.LSTM(
        128, input_shape=X_train_w.shape[-2:], dropout=dropout),
    tf.keras.layers.Dense(128),
    tf.keras.layers.Dense(128),
    tf.keras.layers.Dense(1)
])

model.compile(optimizer='rmsprop', loss='mae')

EVALUATION_INTERVAL = 200
EPOCHS = 15

model_history = model.fit(train_data, epochs=EPOCHS,
                                      steps_per_epoch=EVALUATION_INTERVAL,
                                      validation_data=val_data, validation_steps=50)  

preds_lstm_s3 = model.predict(X_test_w).reshape(1, -1)[0]

# Performance metrics
rmse = np.sqrt(mean_squared_error(y_test_avac, preds_lstm_s3 ))
print(f"RMSE Score = {rmse}")

mae = mean_absolute_error(y_test_avac, preds_lstm_s3 )
print(f"MAE Score = {mae}")

#Forecast value
lstm_s3 = pd.DataFrame({'LSTM Forecast': preds_lstm_s3[:]})
lstm_s3.index = y_test_avac.index
lstm_s3.head(5)

X_test_w1 = X_w[-len(X_test_avac):]
forecast_lstm_s1 = model.predict(X_test_w1).reshape(1, -1)[0]

#Forecast value
lstm_s1a = pd.DataFrame({'LSTM Forecast': forecast_lstm_s1[:10]})
lstm_s1a.index = GDPGR_Forecast.index
lstm_s1a.head(5)

# Plot
# ==============================================================================
fig, ax = plt.subplots(figsize=(9, 4))
y_train.plot(ax=ax, label='train')
y_test_all.plot(ax=ax, label='test')
lstm_s1.plot(ax=ax, label='predictions')
lstm_s1a.plot(ax=ax, label ='forecast')

ax.legend();

"""### **COMBINE ALL PREDICTED AND FORECAST VALUE**"""

#Set 1: All Covid-19
Final_Predicted1 = pd.concat([y_test_all,ar1,svr1, xg1, dt1, rf1, en_s1, ri_s1, las_s1, lstm_s1, prop_s1, knn_s1, lgbm_s1],1)
Final_Predicted1.plot()
Final_Predicted1.head(5)

from google.colab import files
Final_Predicted1.to_csv('final_predicted-set 1.csv') 
files.download('final_predicted-set 1.csv')

#Set 2: Before vaccination
Final_Predicted2 = pd.concat([y_test_bvac,ar2,svr2, xg2, dt2, rf2, en_s2, ri_s2, las_s2, lstm_s2, prop_s2, knn_s2, lgbm_s2],1)
Final_Predicted2.plot()
Final_Predicted2.head(5)

from google.colab import files
Final_Predicted2.to_csv('final_predicted-set 2.csv') 
files.download('final_predicted-set 2.csv')

#Set 3: After vaccination
Final_Predicted3 = pd.concat([y_test_avac,ar3,svr3, xg3, dt3, rf3, en_s3, ri_s3, las_s3, lstm_s3, prop_s3, knn_s3, lgbm_s3],1)
Final_Predicted3.plot()
Final_Predicted3.head(5)

from google.colab import files
Final_Predicted3.to_csv('final_predicted-set 3.csv') 
files.download('final_predicted-set 3.csv')

#Forecasted Value
Final_forecasted = pd.concat([GDPGR_Forecast,ar1a,svr1a, xg1a, dt1a, rf1a, en_s1a, ri_s1a, las_s1a, lstm_s1a, prop_s1a, knn_s1a, lgbm_s1a],1)
Final_forecasted.plot()
Final_forecasted.head(5)

from google.colab import files
Final_Predicted1.to_csv('final_forecasted.csv') 
files.download('final_forecasted.csv')

"""# **With Rolling**"""

df_new = df.drop("GDPGR", axis=1)[:-1].copy()

df_new["GDPGR"] = np.roll(df["GDPGR"], shift=-1)[:-1]

X_train_roll = df_new[:180].drop("GDPGR", axis=1) #Period: 2005-02 to 2020-01 ~ Before Covid-19
X_train1_roll = df_new[:192].drop("GDPGR", axis=1) #Period:: 2005-2 to 2021-01 ~ Before Covid-19 and Vaccine
X_test_all_roll = df_new[180:].drop("GDPGR", axis=1) #Period: 2020-02 to 2021-12 ~ After Covid-19
X_test_bvac_roll = df_new[180:192].drop("GDPGR", axis=1) #Period: 2020-02 to 2021-01 ~ Before vaccination
X_test_avac_roll = df_new[192:].drop("GDPGR", axis=1) # Period: 2021-02 to 2021-12 ~ After vaccination

y_train_roll = df_new[:180]["GDPGR"]
y_train1_roll = df_new[:192]["GDPGR"]
y_test_all_roll = df_new[180:]["GDPGR"]
y_test_bvac_roll = df_new[180:192]["GDPGR"]
y_test_avac_roll = df_new[192:]["GDPGR"]

X_train_roll.shape, X_train1_roll.shape, X_test_all_roll.shape, X_test_bvac_roll.shape, X_test_avac_roll.shape

"""### **LIGHTGBM**"""

import lightgbm
from sklearn.metrics import mean_absolute_error

#Set 1:All Covid-19
model_rlgbm1 = lightgbm.LGBMRegressor()
model_rlgbm1.fit(X_train_roll, y_train_roll)

preds_rlgbm_s1 = model_lgbm1.predict(X_test_all_roll)

# Performance metrics
rmse = np.sqrt(mean_squared_error(y_test_all_roll, preds_rlgbm_s1))
print(f"RMSE Score = {rmse}")

mae = mean_absolute_error(y_test_all_roll, preds_rlgbm_s1)
print(f"MAE Score = {mae}")

#mda = np.mean((np.sign(y_test_all[1:] - y_test_all[:-1]) == np.sign(preds_lgbm_s1[1:] - preds_lgbm_s1[:-1])).astype(int))
#print(f"MDA Score = {mda}")

#Forecast value
rlgbm_s1 = pd.DataFrame({'Light GBM Predicted': preds_rlgbm_s1[:]})
rlgbm_s1.index = y_test_all_roll.index
rlgbm_s1.head(5)

#Set 2: Before vaccination
model_rlgbm2 = lightgbm.LGBMRegressor()
model_rlgbm2.fit(X_train_roll, y_train_roll)

preds_rlgbm_s2 = model_rlgbm2.predict(X_test_bvac_roll)

# Performance metrics
rmse = np.sqrt(mean_squared_error(y_test_bvac_roll, preds_rlgbm_s2))
print(f"RMSE Score = {rmse}")

mae = mean_absolute_error(y_test_bvac_roll, preds_rlgbm_s2)
print(f"MAE Score = {mae}")

#Forecast value
rlgbm_s2 = pd.DataFrame({'Light GBM Predicted': preds_rlgbm_s2[:]})
rlgbm_s2.index = y_test_bvac_roll.index
rlgbm_s2.head(5)

#Set 3: After vaccination
model_rlgbm3 = lightgbm.LGBMRegressor()
model_rlgbm3.fit(X_train1_roll, y_train1_roll)

preds_rlgbm_s3 = model_rlgbm3.predict(X_test_avac_roll)

# Performance metrics
rmse = np.sqrt(mean_squared_error(y_test_avac_roll, preds_rlgbm_s3))
print(f"RMSE Score = {rmse}")

mae = mae = mean_absolute_error(y_test_avac_roll, preds_rlgbm_s3)
print(f"MAE Score = {mae}")

#Forecast value
rlgbm_s3 = pd.DataFrame({'Light GBM Predicted': preds_rlgbm_s3[:]})
rlgbm_s3.index = y_test_avac_roll.index
rlgbm_s3.head(5)

#Forecast value
forecast_rlgbm = model_rlgbm1.predict(X_test_avac_roll)

rlgbm_s1a = pd.DataFrame({'Light GBM Forecast': forecast_rlgbm[:10]})
rlgbm_s1a.index = GDPGR_Forecast.index
rlgbm_s1a.head()

# Plot
# ==============================================================================
fig, ax = plt.subplots(figsize=(9, 4))
y_train.plot(ax=ax, label='train')
y_test_all.plot(ax=ax, label='test')
rlgbm_s1.plot(ax=ax, label='predictions')
rlgbm_s1a.plot(ax=ax, label ='forecast')

ax.legend();

"""### **LASSO REGRESSION**"""

from sklearn.linear_model import Lasso

model_rlas1 = Lasso()
model_rlas1.fit(X_train_roll, y_train_roll)

#Set 1: All Covid-19
preds_rlas_s1 = model_rlas1.predict(X_test_all_roll)

# Performance metrics
rmse = np.sqrt(mean_squared_error(y_test_all_roll, preds_rlas_s1))
print(f"RMSE Score = {rmse}")

mae = mean_absolute_error(y_test_all_roll, preds_rlas_s1)
print(f"MAE Score = {mae}")

#Forecast value
rlas_s1 = pd.DataFrame({'Lasso Predicted': preds_rlas_s1[:]})
rlas_s1.index = y_test_all_roll.index
rlas_s1.head(5)

#Set 2: Before vaccination
model_rlas2 = Lasso()
model_rlas2.fit(X_train_roll, y_train_roll)

preds_rlas_s2 = model_rlas2.predict(X_test_bvac_roll)

# Performance metrics
rmse = np.sqrt(mean_squared_error(y_test_bvac_roll, preds_rlas_s2))
print(f"RMSE Score = {rmse}")

mae = mean_absolute_error(y_test_bvac_roll, preds_rlas_s2)
print(f"MAE Score = {mae}")

#Forecast value
rlas_s2 = pd.DataFrame({'Lasso Predicted': preds_rlas_s2[:]})
rlas_s2.index = y_test_bvac_roll.index
rlas_s2.head(5)

#Set 3: After vaccination
model_rlas3 = Lasso()
model_rlas3.fit(X_train1_roll, y_train1_roll)

preds_rlas_s3 = model_rlas3.predict(X_test_avac_roll)

# Performance metrics
rmse = np.sqrt(mean_squared_error(y_test_avac_roll, preds_rlas_s3))
print(f"RMSE Score = {rmse}")

mae =mean_absolute_error(y_test_avac_roll, preds_rlas_s3)
print(f"MAE Score = {mae}")

#Forecast value
rlas_s3 = pd.DataFrame({'Lasso Predicted': preds_rlas_s3[:]})
rlas_s3.index = y_test_avac_roll.index
rlas_s3.head(5)

#Forecast value
forecast_rlas = model_rlas1.predict(X_test_avac_roll)

rlas_s1a = pd.DataFrame({'Lasso Forecast': forecast_rlas[:10]})
rlas_s1a.index = GDPGR_Forecast.index
rlas_s1a.head()

# Plot
# ==============================================================================
fig, ax = plt.subplots(figsize=(9, 4))
y_train.plot(ax=ax, label='train')
y_test_all.plot(ax=ax, label='test')
rlas_s1.plot(ax=ax, label='predictions')
rlas_s1a.plot(ax=ax, label ='forecast')

ax.legend();

"""### **RIDGE REGRESSION**"""

from sklearn.linear_model import Ridge

model_rri1 = Ridge()
model_rri1.fit(X_train_roll, y_train_roll)

#Set 1: All covid-19
preds_rri_s1 = model_rri1.predict(X_test_all_roll)

# Performance metrics
rmse = np.sqrt(mean_squared_error(y_test_all_roll, preds_rri_s1))
print(f"RMSE Score = {rmse}")

mae = mean_absolute_error(y_test_all_roll, preds_rri_s1)
print(f"MAE Score = {mae}")

#Forecast value
rri_s1 = pd.DataFrame({'Ridge Predicted': preds_rri_s1[:]})
rri_s1.index = y_test_all_roll.index
rri_s1.head(5)

#Set 2: Before vaccination
model_rri2 = Ridge()
model_rri2.fit(X_train_roll, y_train_roll)

preds_rri_s2 = model_rri2.predict(X_test_bvac_roll)

# Performance metrics
rmse = np.sqrt(mean_squared_error(y_test_bvac_roll, preds_rri_s2))
print(f"RMSE Score = {rmse}")

mae = mean_absolute_error(y_test_bvac_roll, preds_rri_s2)
print(f"MAE Score = {mae}")

#Forecast value
rri_s2 = pd.DataFrame({'Ridge Predicted': preds_rri_s2[:]})
rri_s2.index = y_test_bvac_roll.index
rri_s2.head(5)

#Set 3: After vaccination
model_rri3 = Ridge()
model_rri3.fit(X_train1_roll, y_train1_roll)

preds_rri_s3 = model_rri2.predict(X_test_avac_roll)

# Performance metrics
rmse = np.sqrt(mean_squared_error(y_test_avac_roll, preds_rri_s3))
print(f"RMSE Score = {rmse}")

mae = mean_absolute_error(y_test_avac_roll, preds_rri_s3)
print(f"MAE Score = {mae}")

#Forecast value
rri_s3 = pd.DataFrame({'Ridge Forecast': preds_rri_s3[:]})
rri_s3.index = y_test_avac_roll.index
rri_s3.head(5)

#Forecast value
forecast_rri = model_rri1.predict(X_test_avac_roll)

rri_s1a = pd.DataFrame({'XG Boost Forecast': forecast_rri[:10]})
rri_s1a.index = GDPGR_Forecast.index
rri_s1a.head()

# Plot
# ==============================================================================
fig, ax = plt.subplots(figsize=(9, 4))
y_train.plot(ax=ax, label='train')
y_test_all.plot(ax=ax, label='test')
rri_s1.plot(ax=ax, label='predictions')
rri_s1a.plot(ax=ax, label ='forecast')

ax.legend();

"""### **KNN**"""

from sklearn.neighbors import KNeighborsRegressor

model_rknn1 = KNeighborsRegressor()
model_rknn1.fit(X_train_roll, y_train_roll)

#Set 1: All covid-19
preds_rknn_s1 = model_knn1.predict(X_test_all_roll)

# Performance metrics
rmse = np.sqrt(mean_squared_error(y_test_all_roll, preds_rknn_s1))
print(f"RMSE Score = {rmse}")

mae = mean_absolute_error(y_test_all_roll, preds_rknn_s1)
print(f"MAE Score = {mae}")

#Forecast value
rknn_s1 = pd.DataFrame({'KNN Predicted': preds_rknn_s1[:]})
rknn_s1.index = y_test_all_roll.index
rknn_s1.head(5)

#Set 2: Before vaccination
model_rknn2 = KNeighborsRegressor()
model_rknn2.fit(X_train_roll, y_train_roll)

preds_rknn_s2 = model_rknn2.predict(X_test_bvac_roll)

# Performance metrics
rmse = np.sqrt(mean_squared_error(y_test_bvac_roll, preds_rknn_s2))
print(f"RMSE Score = {rmse}")

mae = mean_absolute_error(y_test_bvac_roll, preds_rknn_s2)
print(f"MAE Score = {mae}")

#Forecast value
rknn_s2 = pd.DataFrame({'KNN Predicted': preds_rknn_s2[:]})
rknn_s2.index = y_test_bvac_roll.index
rknn_s2.head(5)

#Set 3: After vaccination
model_rknn3 = KNeighborsRegressor()
model_rknn3.fit(X_train1_roll, y_train1_roll)

preds_rknn_s3 = model_rknn3.predict(X_test_avac_roll)

# Performance metrics
rmse = np.sqrt(mean_squared_error(y_test_avac_roll, preds_rknn_s3))
print(f"RMSE Score = {rmse}")

mae = mean_absolute_error(y_test_avac_roll, preds_rknn_s3)
print(f"MAE Score = {mae}")

#Forecast value
rknn_s3 = pd.DataFrame({'KNN Predicted': preds_rknn_s3[:]})
rknn_s3.index = y_test_avac_roll.index
rknn_s3.head(5)

#Forecast value
forecast_rknn = model_rknn1.predict(X_test_avac_roll)

rknn_s1a = pd.DataFrame({'XG Boost Forecast': forecast_rknn[:10]})
rknn_s1a.index = GDPGR_Forecast.index
rknn_s1a.head()

# Plot
# ==============================================================================
fig, ax = plt.subplots(figsize=(9, 4))
y_train.plot(ax=ax, label='train')
y_test_all.plot(ax=ax, label='test')
rknn_s1.plot(ax=ax, label='predictions')
rknn_s1a.plot(ax=ax, label ='forecast')

ax.legend();

"""### **PROPHET MULTIVARIATE**"""

from fbprophet import Prophet

X_train_prophet = X_train_roll.copy()
X_train1_prophet = X_train1_roll.copy()
X_test_all_prophet = X_test_all_roll.copy()
X_test_bvac_prophet = X_test_bvac_roll.copy()
X_test_avac_prophet = X_test_avac_roll.copy()

y_train_prophet = y_train_roll.copy()
y_train1_prophet = y_train1_roll.copy()
y_test_all_prophet = y_test_all_roll.copy()
y_test_bvac_prophet = y_test_bvac_roll.copy()
y_test_avac_prophet = y_test_avac_roll.copy()

X_train_prophet["ds"] = X_train_prophet.index
X_train_prophet["y"] = y_train_prophet.values

X_train1_prophet["ds"] = X_train1_prophet.index
X_train1_prophet["y"] = y_train1_prophet.values

X_test_all_prophet["ds"] = X_test_all_prophet.index
X_test_all_prophet["y"] = y_test_all_prophet.values

X_test_bvac_prophet["ds"] = X_test_bvac_prophet.index
X_test_bvac_prophet["y"] = y_test_bvac_prophet.values

X_test_avac_prophet["ds"] = X_test_avac_prophet.index
X_test_avac_prophet["y"] = y_test_avac_prophet.values

#Set 1: All Covid-19
prophet1 = Prophet()

for col in X_train_prophet.columns:
    if col not in ["ds", "y"]:
        prophet1.add_regressor(col)

prophet1.fit(X_train_prophet)

yhat = prophet1.predict(X_test_all_prophet)

# Performance metrics
rmse = np.sqrt(mean_squared_error(y_test_all_roll, yhat.yhat))
print(f"RMSE Score = {rmse}")

mae = mean_absolute_error(y_test_all_roll, yhat.yhat)
print(f"MAE Score = {mae}")

#Forecast value
rprop_s1 = pd.DataFrame({'Prophet Predicted': yhat.yhat[:]})
rprop_s1.index = y_test_all_roll.index
rprop_s1.head(5)

#Set 2: Before vaccination
prophet2 = Prophet()

for col in X_train_prophet.columns:
    if col not in ["ds", "y"]:
        prophet2.add_regressor(col)

prophet2.fit(X_train_prophet)

yhat = prophet2.predict(X_test_bvac_prophet)

# Performance metrics
rmse = np.sqrt(mean_squared_error(y_test_bvac_roll, yhat.yhat))
print(f"RMSE Score = {rmse}")

mae = mean_absolute_error(y_test_bvac_roll, yhat.yhat)
print(f"MAE Score = {mae}")

#Forecast value
rprop_s2 = pd.DataFrame({'Prophet Predicted': yhat.yhat[:]})
rprop_s2.index = y_test_bvac_roll.index
rprop_s2.head(5)

#Set 3: After vaccination
prophet3 = Prophet()

for col in X_train1_prophet.columns:
    if col not in ["ds", "y"]:
        prophet3.add_regressor(col)

prophet3.fit(X_train1_prophet)

yhat = prophet3.predict(X_test_avac_prophet)

# Performance metrics
rmse = np.sqrt(mean_squared_error(y_test_avac_roll, yhat.yhat))
print(f"RMSE Score = {rmse}")

mae = mean_absolute_error(y_test_avac_roll, yhat.yhat)
print(f"MAE Score = {mae}")

#Forecast value
rprop_s3 = pd.DataFrame({'Prophet Predicted': yhat.yhat[:]})
rprop_s3.index = y_test_avac_roll.index
rprop_s3.head(5)

#Forecast value
yhat = prophet1.predict(X_test_avac_prophet)

rprop_s1a = pd.DataFrame({'Prophet Forecast': yhat.yhat[:10]})
rprop_s1a.index = GDPGR_Forecast.index
rprop_s1a.head()

# Plot
# ==============================================================================
fig, ax = plt.subplots(figsize=(9, 4))
y_train.plot(ax=ax, label='train')
y_test_all.plot(ax=ax, label='test')
rprop_s1.plot(ax=ax, label='predictions')
rprop_s1a.plot(ax=ax, label ='forecast')

ax.legend();

"""### **ELASTIC NET REGRESSION**"""

from sklearn.linear_model import ElasticNet

#Set 1:All Covid-19
model_ren1 = ElasticNet()
model_ren1.fit(X_train_roll, y_train_roll)

preds_ren_s1 = model_en1.predict(X_test_all_roll)

# Performance metrics
rmse = np.sqrt(mean_squared_error(y_test_all_roll, preds_ren_s1 ))
print(f"RMSE Score = {rmse}")

mae = mean_absolute_error(y_test_all_roll, preds_ren_s1 )
print(f"MAE Score = {mae}")

#Forecast value
ren_s1 = pd.DataFrame({'Elastic Net Predicted': preds_ren_s1[:]})
ren_s1.index = y_test_all_roll.index
ren_s1.head(5)

#Set 2: Before vaccination
model_ren2 = ElasticNet()
model_ren2.fit(X_train_roll, y_train_roll)

preds_ren_s2 = model_ren2.predict(X_test_bvac_roll)

# Performance metrics
rmse = np.sqrt(mean_squared_error(y_test_bvac_roll, preds_ren_s2 ))
print(f"RMSE Score = {rmse}")

mae = mean_absolute_error(y_test_bvac_roll, preds_ren_s2 )
print(f"MAE Score = {mae}")

#Forecast value
ren_s2 = pd.DataFrame({'Elastic Predicted': preds_ren_s2[:]})
ren_s2.index = y_test_bvac_roll.index
ren_s2.head(5)

#Set 3: After vaccination
model_ren3 = ElasticNet()
model_ren3.fit(X_train1_roll, y_train1_roll)

preds_ren_s3 = model_ren3.predict(X_test_avac_roll)

# Performance metrics
rmse = np.sqrt(mean_squared_error(y_test_avac_roll, preds_ren_s3 ))
print(f"RMSE Score = {rmse}")

mae = mean_absolute_error(y_test_avac_roll, preds_ren_s3 )
print(f"MAE Score = {mae}")

#Forecast value
ren_s3 = pd.DataFrame({'Elastic Net Predicted': preds_ren_s3[:]})
ren_s3.index = y_test_avac_roll.index
ren_s3.head(5)

#Forecast value
forecast_en = model_ren1.predict(X_test_avac_roll)

ren_s1a = pd.DataFrame({'Elastic Net Forecast': forecast_en[:10]})
ren_s1a.index = GDPGR_Forecast.index
ren_s1a.head()

# Plot
# ==============================================================================
fig, ax = plt.subplots(figsize=(9, 4))
y_train.plot(ax=ax, label='train')
y_test_all.plot(ax=ax, label='test')
ren_s1.plot(ax=ax, label='predictions')
ren_s1a.plot(ax=ax, label ='forecast')

ax.legend();

"""### **RANDOM FOREST**"""

from sklearn.ensemble import RandomForestRegressor

#Set 1: All Covid-19
model_rrf1 = RandomForestRegressor(n_estimators=5000, oob_score=True, random_state=100)
model_rrf1.fit(X_train_roll, y_train_roll)

preds_rrf1 = model_rrf1.predict(X_test_all_roll)

# Performance metrics
rmse = np.sqrt(mean_squared_error(y_test_all_roll, preds_rrf1 ))
print(f"RMSE Score = {rmse}")

mae = mean_absolute_error(y_test_all_roll, preds_rrf1 )
print(f"MAE Score = {mae}")

#Forecast value
rrf1 = pd.DataFrame({'Random Forest Predicted': preds_rrf1[:]})
rrf1.index = y_test_all_roll.index
rrf1.head(5)

#Set 2: Before vaccination
model_rrf2 = RandomForestRegressor(n_estimators=5000, oob_score=True, random_state=100)
model_rrf2.fit(X_train_roll, y_train_roll)

preds_rrf2 = model_rf2.predict(X_test_bvac_roll)

# Performance metrics
rmse = np.sqrt(mean_squared_error(y_test_bvac_roll, preds_rrf2 ))
print(f"RMSE Score = {rmse}")

mae = mean_absolute_error(y_test_bvac_roll, preds_rrf2 )
print(f"MAE Score = {mae}")

#Forecast value
rrf2 = pd.DataFrame({'Random Forest Predicted': preds_rrf2[:]})
rrf2.index = y_test_bvac_roll.index
rrf2.head(5)

#Set 3: After vaccination
model_rrf3 = RandomForestRegressor(n_estimators=5000, oob_score=True, random_state=100)
model_rrf3.fit(X_train1_roll, y_train1_roll)

preds_rrf3 = model_rf3.predict(X_test_avac_roll)

# Performance metrics
rmse = np.sqrt(mean_squared_error(y_test_avac_roll, preds_rrf3 ))
print(f"RMSE Score = {rmse}")

mae = mean_absolute_error(y_test_avac_roll, preds_rrf3)
print(f"MAE Score = {mae}")

#Forecast value
rrf3 = pd.DataFrame({'Random Forest Predicted': preds_rrf3[:]})
rrf3.index = y_test_avac_roll.index
rrf3.head(5)

#Forecast value
forecast_rf = model_rrf1.predict(X_test_avac_roll)

rrf1a = pd.DataFrame({'Random Forest Forecast': forecast_rf[:10]})
rrf1a.index = GDPGR_Forecast.index
rrf1a.head()

# Plot
# ==============================================================================
fig, ax = plt.subplots(figsize=(9, 4))
y_train.plot(ax=ax, label='train')
y_test_all.plot(ax=ax, label='test')
rrf1.plot(ax=ax, label='predictions')
rrf1a.plot(ax=ax, label ='forecast')

ax.legend();

"""### **DECISION TREE**"""

from sklearn.tree import DecisionTreeRegressor

#Set 1: During Covid-19
model_rdt1 = DecisionTreeRegressor(max_depth=8, min_samples_leaf=0.13, random_state=3)
model_rdt1.fit(X_train_roll, y_train_roll)

preds_rdt1 = model_rdt1.predict(X_test_all_roll)

# Performance metrics
rmse = np.sqrt(mean_squared_error(y_test_all_roll, preds_rdt1 ))
print(f"RMSE Score = {rmse}")

mae = mean_absolute_error(y_test_all_roll, preds_rdt1)
print(f"MAE Score = {mae}")

#Forecast value
rdt1 = pd.DataFrame({'Decision Tree Predicted': preds_rdt1[:]})
rdt1.index = y_test_all_roll.index
rdt1.head(5)

#Set 2: Before vaccination
model_rdt2 = DecisionTreeRegressor(max_depth=8, min_samples_leaf=0.13, random_state=3)
model_rdt2.fit(X_train_roll, y_train_roll)

preds_rdt2 = model_rdt2.predict(X_test_bvac_roll)

# Performance metrics
rmse = np.sqrt(mean_squared_error(y_test_bvac_roll, preds_rdt2 ))
print(f"RMSE Score = {rmse}")

mae = mean_absolute_error(y_test_bvac_roll, preds_rdt2)
print(f"MAE Score = {mae}")

#Forecast value
rdt2 = pd.DataFrame({'Decision Tree Predicted': preds_rdt2[:]})
rdt2.index = y_test_bvac_roll.index
rdt2.head(5)

#Set 3: After vaccination
model_rdt3 = DecisionTreeRegressor(max_depth=8, min_samples_leaf=0.13, random_state=3)
model_rdt3.fit(X_train1_roll, y_train1_roll)

preds_rdt3 = model_rdt3.predict(X_test_avac_roll)

# Performance metrics
rmse = np.sqrt(mean_squared_error(y_test_avac_roll, preds_rdt3 ))
print(f"RMSE Score = {rmse}")

mae = mean_absolute_error(y_test_avac_roll, preds_rdt3)
print(f"MAE Score = {mae}")

#Forecast value
rdt3 = pd.DataFrame({'Decision Tree Predicted': preds_rdt3[:]})
rdt3.index = y_test_avac_roll.index
rdt3.head(5)

#Forecast value
forecast_rdt1 = model_rdt1.predict(X_test_avac_roll)

rdt1a = pd.DataFrame({'Decision Tree Forecast': forecast_rdt1[:10]})
rdt1a.index = GDPGR_Forecast.index
rdt1a.head()

# Plot
# ==============================================================================
fig, ax = plt.subplots(figsize=(9, 4))
y_train.plot(ax=ax, label='train')
y_test_all.plot(ax=ax, label='test')
rdt1.plot(ax=ax, label='predictions')
rdt1a.plot(ax=ax, label ='forecast')

ax.legend();

"""### **XG BOOST**"""

import xgboost as xgb

#Set 1: All Covid-19
model_rxg1 = xgb.XGBRegressor(n_estimators=100,max_depth = 8, min_child_weight = 1,gamma = 1,learning_rate = 0.1) 
model_rxg1.fit(X_train_roll, y_train_roll)

preds_rxg1 = model_rxg1.predict(X_test_all_roll)

# Performance metrics
rmse = np.sqrt(mean_squared_error(y_test_all_roll, preds_rxg1))
print(f"RMSE Score = {rmse}")

mae = mean_absolute_error(y_test_all_roll, preds_rxg1)
print(f"MAE Score = {mae}")

#Forecast value
rxg1 = pd.DataFrame({'XG Boost Predicted': preds_rxg1[:]})
rxg1.index = y_test_all_roll.index
rxg1.head(5)

#Set 2: Before vaccination
model_rxg2 = xgb.XGBRegressor(n_estimators=100,max_depth = 8, min_child_weight = 1,gamma = 1,learning_rate = 0.1) 
model_rxg2.fit(X_train_roll, y_train_roll)

preds_rxg2 = model_rxg2.predict(X_test_bvac_roll)

# Performance metrics
rmse = np.sqrt(mean_squared_error(y_test_bvac_roll, preds_rxg2))
print(f"RMSE Score = {rmse}")

mae = mean_absolute_error(y_test_bvac_roll, preds_rxg2)
print(f"MAE Score = {mae}")

#Forecast value
rxg2 = pd.DataFrame({'XG Boost Predicted': preds_rxg2[:]})
rxg2.index = y_test_bvac_roll.index
rxg2.head(5)

#Set 3: After vaccination
model_rxg3 = xgb.XGBRegressor(n_estimators=100,max_depth = 8, min_child_weight = 1,gamma = 1,learning_rate = 0.1) 
model_rxg3.fit(X_train1_roll, y_train1_roll)

preds_rxg3 = model_xg3.predict(X_test_avac_roll)

# Performance metrics
rmse = np.sqrt(mean_squared_error(y_test_avac_roll, preds_rxg3))
print(f"RMSE Score = {rmse}")

mae = mean_absolute_error(y_test_avac_roll, preds_rxg3)
print(f"MAE Score = {mae}")

#Forecast value
rxg3 = pd.DataFrame({'XG Boost Predicted': preds_rxg3[:]})
rxg3.index = y_test_avac_roll.index
rxg3.head(5)

#Forecast value
forecast_rxg1 = model_rxg1.predict(X_test_avac_roll)

rxg1a = pd.DataFrame({'XG Boost Forecast': forecast_rxg1[:10]})
rxg1a.index = GDPGR_Forecast.index
rxg1a.head()

# Plot
# ==============================================================================
fig, ax = plt.subplots(figsize=(9, 4))
y_train.plot(ax=ax, label='train')
y_test_all.plot(ax=ax, label='test')
rxg1.plot(ax=ax, label='predictions')
rxg1a.plot(ax=ax, label ='forecast')

ax.legend();

"""### **SUPPORT VECTOR MACHINE**"""

from sklearn.svm import SVR

#Set 1: All Covid-19
model_rsvr1 = SVR(kernel= 'rbf')
model_rsvr1.fit(X_train_roll, y_train_roll)

preds_rsvr1 = model_rsvr1.predict(X_test_all_roll)

# Performance metrics
rmse = np.sqrt(mean_squared_error(y_test_all_roll, preds_rsvr1 ))
print(f"RMSE Score = {rmse}")

mae = mean_absolute_error(y_test_all_roll, preds_rsvr1 )
print(f"MAE Score = {mae}")

#Forecast value
rsvr1 = pd.DataFrame({'SVM Predicted': preds_rsvr1 [:]})
rsvr1.index = y_test_all_roll.index
rsvr1.head(5)

#Set 2: Before Vaccination
model_rsvr2 = SVR(kernel= 'rbf')
model_rsvr2.fit(X_train_roll, y_train_roll)

preds_rsvr2 = model_rsvr2.predict(X_test_bvac_roll)

# Performance metrics
rmse = np.sqrt(mean_squared_error(y_test_bvac_roll, preds_rsvr2 ))
print(f"RMSE Score = {rmse}")

mae = mean_absolute_error(y_test_bvac_roll, preds_rsvr2 )
print(f"MAE Score = {mae}")

#Forecast value
rsvr2 = pd.DataFrame({'SVM Predicted': preds_rsvr2 [:]})
rsvr2.index = y_test_bvac_roll.index
rsvr2.head(5)

#Set 3: After Vaccination
model_rsvr3 = SVR(kernel= 'rbf')
model_rsvr3.fit(X_train1_roll, y_train1_roll)

preds_rsvr3 = model_rsvr3.predict(X_test_avac_roll)

# Performance metrics
rmse = np.sqrt(mean_squared_error(y_test_avac_roll, preds_rsvr3 ))
print(f"RMSE Score = {rmse}")

mae = mean_absolute_error(y_test_avac_roll, preds_rsvr3 )
print(f"MAE Score = {mae}")

#Forecast value
rsvr3 = pd.DataFrame({'SVM Predicted': preds_rsvr3 [:]})
rsvr3.index = y_test_avac_roll.index
rsvr3

#Forecast value
forecast_rsvr1 = model_rsvr1.predict(X_test_avac_roll)

rsvr1a = pd.DataFrame({'SVM Forecast': forecast_rsvr1[:10]})
rsvr1a.index = GDPGR_Forecast.index
rsvr1a.head()

# Plot
# ==============================================================================
fig, ax = plt.subplots(figsize=(9, 4))
y_train.plot(ax=ax, label='train')
y_test_all.plot(ax=ax, label='test')
rsvr1.plot(ax=ax, label='predictions')
rsvr1a.plot(ax=ax, label ='forecast')

ax.legend();

"""### **DEEP LEARNING -LSTM**"""

import tensorflow as tf

BATCH_SIZE = 64
BUFFER_SIZE = 100
WINDOW_LENGTH = 24

def window_data(X, Y, window=7):
    '''
    The dataset length will be reduced to guarante all samples have the window, 
    so new length will be len(dataset)-window
    '''
    x = []
    y = []
    for i in range(window-1, len(X)):
        x.append(X[i-window+1:i+1])
        y.append(Y[i])
    return np.array(x), np.array(y)

#Set 1: All Covid-19

#To join the datasets again of train and test
X_w = np.concatenate((X_train_roll, X_test_all_roll))
y_w = np.concatenate((y_train_roll, y_test_all_roll))

X_w, y_w = window_data(X_w, y_w, window=WINDOW_LENGTH)
X_train_w = X_w[:-len(X_test_all_roll)]
y_train_w = y_w[:-len(X_test_all_roll)]
X_test_w = X_w[-len(X_test_all_roll):]
y_test_w = y_w[-len(X_test_all_roll):]

# Check same test set as in the previous models to ensure didn't screw up on the windowing
print(f"Test set equal: {np.array_equal(y_test_w,y_test_all_roll)}")

train_data = tf.data.Dataset.from_tensor_slices((X_train_w, y_train_w))
train_data = train_data.cache().shuffle(BUFFER_SIZE).batch(BATCH_SIZE).repeat()

val_data = tf.data.Dataset.from_tensor_slices((X_test_w, y_test_w))
val_data = val_data.batch(BATCH_SIZE).repeat()

dropout = 0.0
model = tf.keras.models.Sequential([
    tf.keras.layers.LSTM(
        128, input_shape=X_train_w.shape[-2:], dropout=dropout),
    tf.keras.layers.Dense(128),
    tf.keras.layers.Dense(128),
    tf.keras.layers.Dense(1)
])

model.compile(optimizer='rmsprop', loss='mae')

EVALUATION_INTERVAL = 200
EPOCHS = 15

model_history = model.fit(train_data, epochs=EPOCHS,
                                      steps_per_epoch=EVALUATION_INTERVAL,
                                      validation_data=val_data, validation_steps=50)  

preds_rlstm_s1 = model.predict(X_test_w).reshape(1, -1)[0]

# Performance metrics
rmse = np.sqrt(mean_squared_error(y_test_all_roll, preds_rlstm_s1 ))
print(f"RMSE Score = {rmse}")

mae = mean_absolute_error(y_test_all_roll, preds_rlstm_s1 )
print(f"MAE Score = {mae}")

#Forecast value
rlstm_s1 = pd.DataFrame({'LSTM Predicted': preds_rlstm_s1[:]})
rlstm_s1.index = y_test_all_roll.index
rlstm_s1.head(5)

#Set 2: Before vaccination

# To join the datasets again of train and test
X_w = np.concatenate((X_train_roll, X_test_bvac_roll))
y_w = np.concatenate((y_train_roll, y_test_bvac_roll))

X_w, y_w = window_data(X_w, y_w, window=WINDOW_LENGTH)
X_train_w = X_w[:-len(X_test_bvac_roll)]
y_train_w = y_w[:-len(X_test_bvac_roll)]
X_test_w = X_w[-len(X_test_bvac_roll):]
y_test_w = y_w[-len(X_test_bvac_roll):]

# Check same test set as in the previous models to ensure didn't screw up on the windowing
print(f"Test set equal: {np.array_equal(y_test_w,y_test_bvac_roll)}")

train_data = tf.data.Dataset.from_tensor_slices((X_train_w, y_train_w))
train_data = train_data.cache().shuffle(BUFFER_SIZE).batch(BATCH_SIZE).repeat()

val_data = tf.data.Dataset.from_tensor_slices((X_test_w, y_test_w))
val_data = val_data.batch(BATCH_SIZE).repeat()

dropout = 0.0
model = tf.keras.models.Sequential([
    tf.keras.layers.LSTM(
        128, input_shape=X_train_w.shape[-2:], dropout=dropout),
    tf.keras.layers.Dense(128),
    tf.keras.layers.Dense(128),
    tf.keras.layers.Dense(1)
])

model.compile(optimizer='rmsprop', loss='mae')

EVALUATION_INTERVAL = 200
EPOCHS = 15

model_history = model.fit(train_data, epochs=EPOCHS,
                                      steps_per_epoch=EVALUATION_INTERVAL,
                                      validation_data=val_data, validation_steps=50)  

preds_rlstm_s2 = model.predict(X_test_w).reshape(1, -1)[0]

# Performance metrics
rmse = np.sqrt(mean_squared_error(y_test_bvac_roll, preds_rlstm_s2 ))
print(f"RMSE Score = {rmse}")

mae = mean_absolute_error(y_test_bvac_roll, preds_rlstm_s2 )
print(f"MAE Score = {mae}")

#Forecast value
rlstm_s2 = pd.DataFrame({'LSTM Predicted': preds_rlstm_s2[:]})
rlstm_s2.index = y_test_bvac_roll.index
rlstm_s2.head(5)

#Set 3: After vaccination

# To join the datasets again of train and test
X_w = np.concatenate((X_train1_roll, X_test_avac_roll))
y_w = np.concatenate((y_train1_roll, y_test_avac_roll))

X_w, y_w = window_data(X_w, y_w, window=WINDOW_LENGTH)
X_train_w = X_w[:-len(X_test_avac_roll)]
y_train_w = y_w[:-len(X_test_avac_roll)]
X_test_w = X_w[-len(X_test_avac_roll):]
y_test_w = y_w[-len(X_test_avac_roll):]

# Check same test set as in the previous models to ensure didn't screw up on the windowing
print(f"Test set equal: {np.array_equal(y_test_w,y_test_avac_roll)}")

train_data = tf.data.Dataset.from_tensor_slices((X_train_w, y_train_w))
train_data = train_data.cache().shuffle(BUFFER_SIZE).batch(BATCH_SIZE).repeat()

val_data = tf.data.Dataset.from_tensor_slices((X_test_w, y_test_w))
val_data = val_data.batch(BATCH_SIZE).repeat()

dropout = 0.0
model = tf.keras.models.Sequential([
    tf.keras.layers.LSTM(
        128, input_shape=X_train_w.shape[-2:], dropout=dropout),
    tf.keras.layers.Dense(128),
    tf.keras.layers.Dense(128),
    tf.keras.layers.Dense(1)
])

model.compile(optimizer='rmsprop', loss='mae')

EVALUATION_INTERVAL = 200
EPOCHS = 15

model_history = model.fit(train_data, epochs=EPOCHS,
                                      steps_per_epoch=EVALUATION_INTERVAL,
                                      validation_data=val_data, validation_steps=50)  

preds_rlstm_s3 = model.predict(X_test_w).reshape(1, -1)[0]

# Performance metrics
rmse = np.sqrt(mean_squared_error(y_test_avac_roll, preds_rlstm_s3 ))
print(f"RMSE Score = {rmse}")

mae = mean_absolute_error(y_test_avac_roll, preds_rlstm_s3 )
print(f"MAE Score = {mae}")

#Forecast value
rlstm_s3 = pd.DataFrame({'LSTM Predicted': preds_rlstm_s3[:]})
rlstm_s3.index = y_test_avac_roll.index
rlstm_s3.head(5)

X_test_w1 = X_w[-len(X_test_avac_roll):]
forecast_rlstm_s1 = model.predict(X_test_w1).reshape(1, -1)[0]

#Forecast value
rlstm_s1a = pd.DataFrame({'LSTM Forecast': forecast_rlstm_s1[:10]})
rlstm_s1a.index = GDPGR_Forecast.index
rlstm_s1a.head(5)

# Plot
# ==============================================================================
fig, ax = plt.subplots(figsize=(9, 4))
y_train.plot(ax=ax, label='train')
y_test_all.plot(ax=ax, label='test')
rlstm_s1.plot(ax=ax, label='predictions')
rlstm_s1a.plot(ax=ax, label ='forecast')

ax.legend();

"""### **COMBINE ALL FORECAST**"""

#Set 1: All Covid-19
Final_rpredicted1 = pd.concat([y_test_all_roll,ar1,rsvr1, rxg1, rdt1, rrf1, ren_s1, rri_s1, rlas_s1, rlstm_s1, rprop_s1, rknn_s1, rlgbm_s1],1)
Final_rpredicted1.plot()
Final_rpredicted1.head(5)

from google.colab import files
Final_rpredicted1.to_csv('final_predicted-rolling set 1.csv') 
files.download('final_predicted-rolling set 1.csv')

#Set 2: Before vaccination
Final_rpredicted2 = pd.concat([y_test_bvac_roll,ar2,rsvr2, rxg2, rdt2, rrf2, ren_s2, rri_s2, rlas_s2, rlstm_s2, rprop_s2, rknn_s2, rlgbm_s2],1)
Final_rpredicted2.plot()
Final_rpredicted2.head(5)

from google.colab import files
Final_rpredicted2.to_csv('final_predicted-rolling set 2.csv') 
files.download('final_predicted-rolling set 2.csv')

#Set 3: After vaccination
Final_rpredicted3 = pd.concat([y_test_avac_roll,ar3,rsvr3, rxg3, rdt3, rrf3, ren_s3, rri_s3, rlas_s3, rlstm_s3, rprop_s3, rknn_s3, rlgbm_s3],1)
Final_rpredicted3.plot()
Final_rpredicted3.head(5)

from google.colab import files
Final_rpredicted3.to_csv('final_predicted-rolling set 3.csv') 
files.download('final_predicted-rolling set 3.csv')

#Forecasted Value
Final_forecasted = pd.concat([GDPGR_Forecast,ar1a,rsvr1a, rxg1a, rdt1a, rrf1a, ren_s1a, rri_s1a, rlas_s1a, rlstm_s1a, rprop_s1a, rknn_s1a, rlgbm_s1a],1)
Final_forecasted.plot()
Final_forecasted.head(5)

from google.colab import files
Final_forecasted.to_csv('final_forecasted-rolling.csv') 
files.download('final_forecasted-rolling.csv')